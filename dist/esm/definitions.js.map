{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\n// Payload from a new NFC scan is a base64 encoded string\nexport type PayloadType = string | number[] | Uint8Array;\n\nexport interface NFCPluginBasic {\n  /**\n   * Checks if NFC is supported on the device. Returns true on all iOS devices, and checks for support on Android.\n   */\n  isSupported(): Promise<{ supported: boolean }>;\n\n  startScan(): Promise<void>;\n\n  /**\n   * Writes an NDEF message to an NFC tag.\n   * @param options The NDEF message to write.\n   */\n  writeNDEF<T extends PayloadType = number[]>(options: NDEFWriteOptions<T>): Promise<void>;\n\n  /**\n   * Cancels writeNDEF on Android (exits \"write mode\").\n   */\n  cancelWriteAndroid(): Promise<void>;\n\n  /**\n   * Lock the tag\n   */\n  lockTag(): Promise<void>;\n\n  /**\n   * Set to auto lock mode\n   */\n  setReadAndLockMode(data: { enabled: boolean; data: string }): Promise<any>;\n\n  /**\n   * Executed the saved plugin call message\n   */\n  startNfcOperation(): Promise<any>;\n\n  /**\n   * Adds a listener for NFC tag detection events.\n   * @param eventName The name of the event ('nfcTag').\n   * @param listenerFunc The function to call when an NFC tag is detected.\n   */\n  addListener(\n    eventName: 'nfcTag',\n    listenerFunc: (data: NDEFMessages) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Adds a listener for NFC tag write events.\n   * @param eventName The name of the event ('nfcWriteSuccess').\n   * @param listenerFunc The function to call when an NFC tag is written.\n   */\n  addListener(\n    eventName: 'nfcWriteSuccess',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Adds a listener for NFC error events.\n   * @param eventName The name of the event ('nfcError').\n   * @param listenerFunc The function to call when an NFC error occurs.\n   */\n  addListener(\n    eventName: 'nfcError',\n    listenerFunc: (error: NFCError) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners for the specified event.\n   * @param eventName The name of the event.\n   */\n  removeAllListeners(eventName: 'nfcTag' | 'nfcError'): Promise<void>;\n}\n\nexport interface NDEFMessages<T extends PayloadType = string> {\n  messages: NDEFMessage<T>[];\n}\n\nexport interface NDEFMessage<T extends PayloadType = string> {\n  records: NDEFRecord<T>[];\n}\n\nexport interface NDEFRecord<T extends PayloadType = string> {\n  /**\n   * The type of the record.\n   */\n  type: string;\n\n  /**\n   * The payload of the record.\n   */\n  payload: T;\n}\n\nexport interface NFCError {\n  /**\n   * The error message.\n   */\n  error: string;\n}\n\nexport interface NDEFWriteOptions<T extends PayloadType = Uint8Array> {\n  records: NDEFRecord<T>[];\n}\n\nexport type NDEFMessagesTransformable = {\n  base64: () => NDEFMessages;\n  uint8Array: () => NDEFMessages<Uint8Array>;\n  string: () => NDEFMessages;\n  numberArray: () => NDEFMessages<number[]>;\n};\n\nexport type TagResultListenerFunc = (data: NDEFMessagesTransformable) => void;\n\nexport interface NFCPlugin extends Omit<NFCPluginBasic, 'writeNDEF' | 'lockTag' | 'addListener'> {\n  writeNDEF: <T extends PayloadType = Uint8Array>(record?: NDEFWriteOptions<T>) => Promise<void>;\n  wrapperListeners: TagResultListenerFunc[];\n  onRead: (listenerFunc: TagResultListenerFunc) => void;\n  onWrite: (listenerFunc: () => void) => void;\n  onError: (listenerFunc: (error: NFCError) => void) => void;\n  lockTag: () => Promise<void>;\n  setReadAndLockMode: (data: { enabled: boolean; data: string }) => Promise<any>;\n  startNfcOperation: () => Promise<any>;\n}\n"]}